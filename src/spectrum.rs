use crate::core::*;
use std::ops::{Add, AddAssign, Sub, Mul, Div, DivAssign, Index};

pub enum SpectrumType {Reflectance, Illumination}

pub trait Spectrum: std::marker::Sized + Add + Mul {
    fn is_black(&self) -> bool;
    //fn to_rgb(&self) -> Vec3;
}

// XYZSpectrum
// Assume camera integrates according to CIE.
//pub type XYZSpectrum = Vec3;
//impl Spectrum for XYZSpectrum {
//    fn is_black(&self) -> bool { self.squared_length() < EPS }
//    fn to_rgb(&self) -> Vec3 {
//        Vec3::new(
//             3.240479 * self.x() - 1.537150 * self.y() - 0.498535 * self.z(),
//            -0.969256 * self.x() + 1.875991 * self.y() + 0.041556 * self.z(),
//             0.055648 * self.x() - 0.204043 * self.y() + 1.057311 * self.z()
//        )
//    }
//}

// RGBSpectrum
pub type RGBSpectrum = Vec3;
impl Spectrum for RGBSpectrum {
    fn is_black(&self) -> bool { self.squared_length() < EPS }
}


pub fn zero_spectrum() -> SampledSpectrum {
    SampledSpectrum{
    wavelengths:    vec![700.0, 701.0],
    values:         vec![0.0, 0.0]
    }.clone()
}
pub fn cornell_light() -> SampledSpectrum {
    SampledSpectrum{
    wavelengths:    vec![400.0, 500.0, 600.0, 700.0],
    values:         vec![0.0, 8.0, 15.6, 18.4]
    }
}

#[derive(Clone, Debug)]
pub struct SampledSpectrum {
    wavelengths: Vec<Real>,
    values: Vec<Real>
}
impl SampledSpectrum {
    pub fn new(wavelengths: Vec<Real>, values: Vec<Real>) -> SampledSpectrum {
        SampledSpectrum{wavelengths, values}
    }
}
impl Spectrum for SampledSpectrum {
    fn is_black(&self) -> bool { self.values.iter().sum::<Real>() < EPS }
}

impl Mul for SampledSpectrum {
    type Output = SampledSpectrum;
    fn mul(self, rhs: SampledSpectrum) -> SampledSpectrum {
        let mut new_values = self.values;
        for (lhs, rhs) in new_values.iter_mut().zip(rhs.values) {
            *lhs *= rhs;
        }
        return SampledSpectrum{values: new_values, wavelengths: self.wavelengths}
    }
}

impl Mul<Real> for SampledSpectrum {
    type Output = SampledSpectrum;

    fn mul(self, rhs: Real) -> SampledSpectrum {
        let new_values = self.values.into_iter().map(|x| x*rhs).collect();
        return SampledSpectrum{values: new_values, wavelengths: self.wavelengths}
    }
}

impl Add for SampledSpectrum {
    type Output = SampledSpectrum;
    fn add(self, rhs: SampledSpectrum) -> SampledSpectrum {
        let mut new_values = self.values;
        for (lhs, rhs) in new_values.iter_mut().zip(rhs.values) {
            *lhs += rhs;
        }
        return SampledSpectrum{values: new_values, wavelengths: self.wavelengths}
    }
}

pub fn cie_x() -> SampledSpectrum {
    SampledSpectrum{
    wavelengths: vec![380.0, 381.0, 382.0, 383.0, 384.0, 385.0, 386.0, 387.0, 388.0, 389.0,
        390.0, 391.0, 392.0, 393.0, 394.0, 395.0, 396.0, 397.0, 398.0, 399.0, 400.0, 401.0, 402.0,
        403.0, 404.0, 405.0, 406.0, 407.0, 408.0, 409.0, 410.0, 411.0, 412.0, 413.0, 414.0, 415.0, 416.0, 417.0, 418.0,
        419.0, 420.0, 421.0, 422.0, 423.0, 424.0, 425.0, 426.0, 427.0, 428.0, 429.0, 430.0, 431.0,
        432.0, 433.0, 434.0, 435.0, 436.0, 437.0, 438.0, 439.0, 440.0, 441.0, 442.0, 443.0, 444.0,
        445.0, 446.0, 447.0, 448.0, 449.0, 450.0, 451.0, 452.0, 453.0, 454.0, 455.0, 456.0, 457.0,
        458.0, 459.0, 460.0, 461.0, 462.0, 463.0, 464.0, 465.0, 466.0, 467.0, 468.0, 469.0, 470.0,
        471.0, 472.0, 473.0, 474.0, 475.0, 476.0, 477.0, 478.0, 479.0, 480.0, 481.0, 482.0, 483.0,
        484.0, 485.0, 486.0, 487.0, 488.0, 489.0, 490.0, 491.0, 492.0, 493.0, 494.0, 495.0, 496.0,
        497.0, 498.0, 499.0, 500.0, 501.0, 502.0, 503.0, 504.0, 505.0, 506.0, 507.0, 508.0, 509.0,
        510.0, 511.0, 512.0, 513.0, 514.0, 515.0, 516.0, 517.0, 518.0, 519.0, 520.0, 521.0, 522.0,
        523.0, 524.0, 525.0, 526.0, 527.0, 528.0, 529.0, 530.0, 531.0, 532.0, 533.0, 534.0, 535.0,
        536.0, 537.0, 538.0, 539.0, 540.0, 541.0, 542.0, 543.0, 544.0, 545.0, 546.0, 547.0, 548.0,
        549.0, 550.0, 551.0, 552.0, 553.0, 554.0, 555.0, 556.0, 557.0, 558.0, 559.0, 560.0, 561.0,
        562.0, 563.0, 564.0, 565.0, 566.0, 567.0, 568.0, 569.0, 570.0, 571.0, 572.0, 573.0, 574.0,
        575.0, 576.0, 577.0, 578.0, 579.0, 580.0, 581.0, 582.0, 583.0, 584.0, 585.0, 586.0, 587.0,
        588.0, 589.0, 590.0, 591.0, 592.0, 593.0, 594.0, 595.0, 596.0, 597.0, 598.0, 599.0, 600.0,
        601.0, 602.0, 603.0, 604.0, 605.0, 606.0, 607.0, 608.0, 609.0, 610.0, 611.0, 612.0, 613.0,
        614.0, 615.0, 616.0, 617.0, 618.0, 619.0, 620.0, 621.0, 622.0, 623.0, 624.0, 625.0, 626.0,
        627.0, 628.0, 629.0, 630.0, 631.0, 632.0, 633.0, 634.0, 635.0, 636.0, 637.0, 638.0, 639.0,
        640.0, 641.0, 642.0, 643.0, 644.0, 645.0, 646.0, 647.0, 648.0, 649.0, 650.0, 651.0, 652.0,
        653.0, 654.0, 655.0, 656.0, 657.0, 658.0, 659.0, 660.0, 661.0, 662.0, 663.0, 664.0, 665.0,
        666.0, 667.0, 668.0, 669.0, 670.0, 671.0, 672.0, 673.0, 674.0, 675.0, 676.0, 677.0, 678.0,
        679.0, 680.0, 681.0, 682.0, 683.0, 684.0, 685.0, 686.0, 687.0, 688.0, 689.0, 690.0, 691.0,
        692.0, 693.0, 694.0, 695.0, 696.0, 697.0, 698.0, 699.0, 700.0, 701.0, 702.0, 703.0, 704.0,
        705.0, 706.0, 707.0, 708.0, 709.0, 710.0, 711.0, 712.0, 713.0, 714.0, 715.0, 716.0, 717.0,
        718.0, 719.0, 720.0, 721.0, 722.0, 723.0, 724.0, 725.0, 726.0, 727.0, 728.0, 729.0, 730.0,
        731.0, 732.0, 733.0, 734.0, 735.0, 736.0, 737.0, 738.0, 739.0, 740.0, 741.0, 742.0, 743.0,
        744.0, 745.0, 746.0, 747.0, 748.0, 749.0, 750.0, 751.0, 752.0, 753.0, 754.0, 755.0, 756.0,
        757.0, 758.0, 759.0, 760.0, 761.0, 762.0, 763.0, 764.0, 765.0, 766.0, 767.0, 768.0, 769.0,
        770.0, 771.0, 772.0, 773.0, 774.0, 775.0, 776.0, 777.0, 778.0, 779.0, 780.0],

    values: vec![7.85061403e-04, 8.41137218e-04, 8.97213032e-04, 1.00936466e-03,
       1.12151629e-03, 1.23366792e-03, 1.40189536e-03, 1.62619862e-03,
       1.85050188e-03, 2.07480514e-03, 2.35518421e-03, 2.69163910e-03,
       2.97201817e-03, 3.36454887e-03, 3.81315539e-03, 4.31783772e-03,
       4.93467168e-03, 5.60758145e-03, 6.33656704e-03, 7.17770426e-03,
       8.01884147e-03, 8.74782706e-03, 9.58896428e-03, 1.05422531e-02,
       1.16637694e-02, 1.30095890e-02, 1.47479392e-02, 1.67105927e-02,
       1.90097011e-02, 2.15331128e-02, 2.43929793e-02, 2.74210733e-02,
       3.08416980e-02, 3.46548534e-02, 3.88605394e-02, 4.35148321e-02,
       4.88420344e-02, 5.47299950e-02, 6.10665620e-02, 6.79638872e-02,
       7.53658947e-02, 8.39454943e-02, 9.29176246e-02, 1.02057982e-01,
       1.11310492e-01, 1.20450850e-01, 1.28918298e-01, 1.37105366e-01,
       1.44899905e-01, 1.52301912e-01, 1.59199237e-01, 1.65311501e-01,
       1.70863007e-01, 1.75853754e-01, 1.80339819e-01, 1.84209051e-01,
       1.87461448e-01, 1.90153087e-01, 1.92340044e-01, 1.94078394e-01,
       1.95312062e-01, 1.96041047e-01, 1.96321427e-01, 1.96265351e-01,
       1.95872820e-01, 1.95199910e-01, 1.94246621e-01, 1.93125105e-01,
       1.91779286e-01, 1.90209163e-01, 1.88526888e-01, 1.86900690e-01,
       1.85106264e-01, 1.83199686e-01, 1.81068805e-01, 1.78713621e-01,
       1.76078058e-01, 1.73218191e-01, 1.70077945e-01, 1.66713397e-01,
       1.63068469e-01, 1.59199237e-01, 1.55105703e-01, 1.50675714e-01,
       1.45909269e-01, 1.40806370e-01, 1.34918410e-01, 1.28806146e-01,
       1.22469579e-01, 1.16020860e-01, 1.09572142e-01, 1.03403802e-01,
       9.72915382e-02, 9.12914260e-02, 8.54034655e-02, 7.96837324e-02,
       7.41322268e-02, 6.87489486e-02, 6.35338978e-02, 5.84870745e-02,
       5.36084787e-02, 4.89541861e-02, 4.44681209e-02, 4.02624348e-02,
       3.62249762e-02, 3.25239724e-02, 2.91033477e-02, 2.59631021e-02,
       2.31032356e-02, 2.04115965e-02, 1.79442606e-02, 1.56451522e-02,
       1.35142713e-02, 1.16076936e-02, 9.81326754e-03, 8.24314473e-03,
       6.78517355e-03, 5.55150564e-03, 4.42998935e-03, 3.53277631e-03,
       2.74771491e-03, 2.07480514e-03, 1.62619862e-03, 1.34581955e-03,
       1.23366792e-03, 1.34581955e-03, 1.62619862e-03, 2.13088095e-03,
       2.91594235e-03, 3.92530702e-03, 5.21505075e-03, 6.84124937e-03,
       8.74782706e-03, 1.09347838e-02, 1.34581955e-02, 1.63180620e-02,
       1.95704593e-02, 2.31032356e-02, 2.69163910e-02, 3.10660012e-02,
       3.54959906e-02, 4.01502832e-02, 4.51410307e-02, 5.03560814e-02,
       5.57954354e-02, 6.14590927e-02, 6.74031290e-02, 7.35153928e-02,
       7.97958840e-02, 8.62446027e-02, 9.28054730e-02, 9.93663433e-02,
       1.06039365e-01, 1.12768463e-01, 1.19609712e-01, 1.26563113e-01,
       1.33628666e-01, 1.40806370e-01, 1.48040150e-01, 1.55386082e-01,
       1.62844165e-01, 1.70414400e-01, 1.78096787e-01, 1.85835249e-01,
       1.93741939e-01, 2.01704705e-01, 2.09779622e-01, 2.17910615e-01,
       2.26209836e-01, 2.34565132e-01, 2.43032580e-01, 2.51668255e-01,
       2.60416083e-01, 2.69219985e-01, 2.78136040e-01, 2.87164246e-01,
       2.96248528e-01, 3.05444962e-01, 3.14697471e-01, 3.24006056e-01,
       3.33370717e-01, 3.42735378e-01, 3.52156115e-01, 3.61576852e-01,
       3.70997589e-01, 3.80418326e-01, 3.89895138e-01, 3.99315875e-01,
       4.08680536e-01, 4.18045197e-01, 4.27353782e-01, 4.36550216e-01,
       4.45690574e-01, 4.54718780e-01, 4.63634834e-01, 4.72438737e-01,
       4.81074413e-01, 4.89597936e-01, 4.97897157e-01, 5.05972074e-01,
       5.13822688e-01, 5.21392923e-01, 5.28682779e-01, 5.35692256e-01,
       5.42365278e-01, 5.48757921e-01, 5.54814109e-01, 5.60533842e-01,
       5.65861044e-01, 5.70907867e-01, 5.75506084e-01, 5.79823922e-01,
       5.83749229e-01, 5.87169854e-01, 5.90141872e-01, 5.92553132e-01,
       5.94235406e-01, 5.95356923e-01, 5.95973757e-01, 5.96085908e-01,
       5.95637302e-01, 5.94852240e-01, 5.93562496e-01, 5.91711995e-01,
       5.89300735e-01, 5.86328716e-01, 5.82571637e-01, 5.78309875e-01,
       5.73431279e-01, 5.68104077e-01, 5.62216116e-01, 5.55935625e-01,
       5.49206527e-01, 5.41972747e-01, 5.34346436e-01, 5.26215443e-01,
       5.17691919e-01, 5.08719789e-01, 4.99299052e-01, 4.89429709e-01,
       4.79111759e-01, 4.68176975e-01, 4.56905737e-01, 4.45298043e-01,
       4.33409970e-01, 4.21353670e-01, 4.09129143e-01, 3.96848539e-01,
       3.84567936e-01, 3.72343408e-01, 3.60231032e-01, 3.48623339e-01,
       3.37183873e-01, 3.25912634e-01, 3.14809623e-01, 3.03874839e-01,
       2.93052207e-01, 2.82341726e-01, 2.71799473e-01, 2.61425447e-01,
       2.51163573e-01, 2.41013851e-01, 2.31088432e-01, 2.21275164e-01,
       2.11686200e-01, 2.02321539e-01, 1.93181181e-01, 1.84265126e-01,
       1.75573375e-01, 1.67105927e-01, 1.58974934e-01, 1.51180396e-01,
       1.43666237e-01, 1.36376381e-01, 1.29366904e-01, 1.22637806e-01,
       1.16133012e-01, 1.09852521e-01, 1.03852408e-01, 9.80205237e-02,
       9.24690181e-02, 8.71418157e-02, 8.19828408e-02, 7.71042449e-02,
       7.23938765e-02, 6.79638872e-02, 6.37021253e-02, 5.97207424e-02,
       5.59075871e-02, 5.23748107e-02, 4.90102619e-02, 4.59260921e-02,
       4.30662255e-02, 4.04306623e-02, 3.79633264e-02, 3.56642180e-02,
       3.35333371e-02, 3.15706836e-02, 2.96641059e-02, 2.79257556e-02,
       2.62434812e-02, 2.45051309e-02, 2.28789323e-02, 2.13088095e-02,
       1.98508383e-02, 1.84489430e-02, 1.71591992e-02, 1.59255313e-02,
       1.48040150e-02, 1.37385746e-02, 1.27292099e-02, 1.18319969e-02,
       1.09908596e-02, 1.02057982e-02, 9.53288847e-03, 8.85997869e-03,
       8.29922055e-03, 7.73846240e-03, 7.23378007e-03, 6.78517355e-03,
       6.39264285e-03, 5.94403634e-03, 5.55150564e-03, 5.21505075e-03,
       4.87859586e-03, 4.54214097e-03, 4.26176190e-03, 3.98138283e-03,
       3.70100376e-03, 3.47670050e-03, 3.25239724e-03, 3.02809398e-03,
       2.85986654e-03, 2.63556328e-03, 2.46733584e-03, 2.29910839e-03,
       2.13088095e-03, 2.01872932e-03, 1.85050188e-03, 1.73835025e-03,
       1.62619862e-03, 1.51404699e-03, 1.40189536e-03, 1.34581955e-03,
       1.23366792e-03, 1.12151629e-03, 1.06544048e-03, 1.00936466e-03,
       9.53288847e-04, 8.41137218e-04, 7.85061403e-04, 7.28985589e-04,
       6.72909774e-04, 6.72909774e-04, 6.16833960e-04, 5.60758145e-04,
       5.04682331e-04, 5.04682331e-04, 4.48606516e-04, 3.92530702e-04,
       3.92530702e-04, 3.36454887e-04, 3.36454887e-04, 3.36454887e-04,
       2.80379073e-04, 2.80379073e-04, 2.24303258e-04, 2.24303258e-04,
       2.24303258e-04, 2.24303258e-04, 1.68227444e-04, 1.68227444e-04,
       1.68227444e-04, 1.68227444e-04, 1.68227444e-04, 1.12151629e-04,
       1.12151629e-04, 1.12151629e-04, 1.12151629e-04, 1.12151629e-04,
       1.12151629e-04, 1.12151629e-04, 5.60758145e-05, 5.60758145e-05,
       5.60758145e-05, 5.60758145e-05, 5.60758145e-05, 5.60758145e-05,
       5.60758145e-05, 5.60758145e-05, 5.60758145e-05, 5.60758145e-05,
       5.60758145e-05, 5.60758145e-05, 5.60758145e-05, 5.60758145e-05,
       5.60758145e-05, 5.60758145e-05, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00 ]
    }
}

pub fn trapz(x: &Vec<Real>, y: &Vec<Real>) -> Real {
    assert_eq!(x.len(), y.len());
    let n_steps = x.len();
    //let step_size = (x.last() - x.first()) / n_steps as Real;

    let mut val = 0.0;
    for i in 0..(n_steps-1) {
        let step_size = x[i+1] - x[i];
        val += y[i] + y[i+1];
    }
    return val * 0.5;
}

pub fn integrate_spectrum_cie(s: &SampledSpectrum) -> Vec3 {
    Vec3::new( trapz(&s.wavelengths, &s.values), 0.0, 0.0 )
}
